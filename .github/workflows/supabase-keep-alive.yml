name: Supabaseプロジェクト維持

on:
  schedule:
    # 月曜日と木曜日の午前9時（UTC）に実行
    - cron: '0 9 * * 1,4'
  workflow_dispatch: # 手動実行も可能

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    
    steps:
      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Supabaseにpingを送信
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.NEXT_SERVICE_ROLE_KEY }}
        run: |
          # パッケージを初期化
          npm init -y
          npm install @supabase/supabase-js
          
          # Keep aliveスクリプトを実行
          node -e "
          (async () => {
            try {
              console.log('🚀 Supabase keep-alive開始...');
              console.log('環境変数確認:');
              console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? '設定済み' : '未設定');
              console.log('SUPABASE_KEY:', process.env.SUPABASE_KEY ? '設定済み' : '未設定');
              
              if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
                throw new Error('Supabase環境変数が設定されていません');
              }
              
              const { createClient } = require('@supabase/supabase-js');
              
              const supabase = createClient(
                process.env.SUPABASE_URL, 
                process.env.SUPABASE_KEY
              );
              
              console.log('📡 Supabaseに接続中...');
              
              // システムテーブルから情報を取得（確実に存在するテーブル）
              const { data, error } = await supabase
                .from('information_schema')
                .select('*')
                .limit(1)
                .single();
              
              if (error) {
                console.log('クエリ結果:', error.code, error.message);
                // エラーでも接続は成功しているので続行
              }
              
              console.log('✅ Supabaseプロジェクトがアクティブに保たれました');
              console.log('📅 実行時刻:', new Date().toISOString());
              console.log('🎯 次回実行: 月曜日または木曜日 9:00 UTC');
              
            } catch (error) {
              console.error('❌ エラーが発生しました:', error.message);
              process.exit(1);
            }
          })();
          "
